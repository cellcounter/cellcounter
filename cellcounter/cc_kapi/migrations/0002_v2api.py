# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-24 16:16
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.core.exceptions import ObjectDoesNotExist
from django.db import connection

from ..defaults import BUILTIN_KEYBOARDS
from ..models import User
from ..models import Keyboard as KeyboardLatest

def builtin_keyboards(apps, schema_editor):
    """Insert the builtin keyboards into the database.
    """
    CellType = apps.get_model("main", "CellType")

    KeyMap = apps.get_model("cc_kapi", "KeyMap")
    Keyboard = apps.get_model("cc_kapi", "Keyboard")

    for keyboard_data in BUILTIN_KEYBOARDS:
        mappings_data = keyboard_data['mappings']
        k_data = dict((k, keyboard_data[k]) for k in keyboard_data.keys() if k not in ['mappings'])
        kb = Keyboard.objects.create(**k_data)

        celltype_objects = [CellType.objects.get(id=mapping['cellid']) for
                            mapping in mappings_data]

        mapping_objects = [KeyMap.objects.get_or_create(cellid=ct, key=mapping['key'])[0] for
                           (mapping, ct) in zip(mappings_data, celltype_objects)]

        [kb.mappings.add(x) for x in mapping_objects]

        kb.save()

def remove_builtin_keyboards(apps, schema_editor):
    # get all the models corresponding to the current state
    Keyboard = apps.get_model("cc_kapi", "Keyboard")

    builtin_keyboards = Keyboard.objects.filter(user=None)

    for kb in builtin_keyboards:
        kb.delete()

def migrate_user_default_keyboards(apps, schema_editor):
    # get all the models corresponding to the current state
    Keyboard = apps.get_model("cc_kapi", "Keyboard")
    DefaultKeyboards = apps.get_model("cc_kapi", "DefaultKeyboards")
    User = apps.get_model("auth", "user")

    for user in User.objects.all():
        # the previous code should guarantee there is at most one primary keyboard per user
        try:
            keyboard = Keyboard.objects.get(user=user, is_primary=True)
        except ObjectDoesNotExist:
            continue
        if not hasattr(user, 'defaultkeyboards'):
            defaultkeyboards = DefaultKeyboards.objects.create(user=user)
        else:
            defaultkeyboards = user.defaultkeyboards
        if keyboard.device_type == KeyboardLatest.DESKTOP:
            defaultkeyboards.desktop = keyboard
        elif keyboard.device_type == KeyboardLatest.MOBILE:
            defaultkeyboards.mobile = keyboard
        defaultkeyboards.save()

def undo_user_default_keyboards(apps, schema_editor):
    # get all the models corresponding to the current state
    Keyboard = apps.get_model("cc_kapi", "Keyboard")
    DefaultKeyboards = apps.get_model("cc_kapi", "DefaultKeyboards")
    User = apps.get_model("auth", "user")

    for user in User.objects.all():
        if hasattr(user, 'defaultkeyboards') and hasattr(user.defaultkeyboards, 'desktop'):
            default_desktop = user.defaultkeyboards.desktop
            keyboard = Keyboard.objects.get(id=default_desktop.id)
            keyboard.is_primary = True
            keyboard.save()


class Migration(migrations.Migration):

    def database_detect_sqlite_noop():
        # hack around sqlite not supporting the SET CONSTRAINTS SQL command
        if connection.vendor == 'sqlite':
            return migrations.RunSQL.noop
        return 'SET CONSTRAINTS ALL IMMEDIATE'

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('main', '0002_initial_data'),
        ('cc_kapi', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(database_detect_sqlite_noop(),
                      reverse_sql=migrations.RunSQL.noop),
        migrations.CreateModel(
            name='DefaultKeyboards',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='keyboard',
            name='device_type',
            field=models.PositiveIntegerField(choices=[(1, b'desktop'), (2, b'mobile')], default=1),
        ),
        migrations.AlterField(
            model_name='keyboard',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultkeyboards',
            name='desktop',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='desktop_default', to='cc_kapi.Keyboard'),
        ),
        migrations.AddField(
            model_name='defaultkeyboards',
            name='mobile',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mobile_default', to='cc_kapi.Keyboard'),
        ),
        migrations.AlterField(
            model_name='keyboard',
            name='created',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='keyboard',
            name='last_modified',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.RunPython(
            migrate_user_default_keyboards,
            undo_user_default_keyboards,
        ),
        migrations.RemoveField(
            model_name='keyboard',
            name='is_primary',
        ),
        migrations.RunPython(
            builtin_keyboards,
            remove_builtin_keyboards,
        ),
        migrations.RunSQL(migrations.RunSQL.noop,
                      reverse_sql=database_detect_sqlite_noop()),
    ]
